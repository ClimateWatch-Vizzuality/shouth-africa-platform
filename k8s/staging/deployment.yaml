apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: south-africa-platform-staging
  name: south-africa-platform-staging
  namespace: climate-watch
spec:
  progressDeadlineSeconds: 2147483647
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      name: south-africa-platform-staging
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: south-africa-platform-staging
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: type
                operator: In
                values:
                - webapps
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: name
                  operator: In
                  values:
                  - south-africa-platform-staging
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - args:
        - start
        env:
        - name: CW_FILES_PREFIX
          value: climatewatch.org/staging.climatewatch.org/south-africa/
        - name: RACK_ENV
          value: production
        - name: RAILS_ENV
          value: production
        - name: PORT
          value: "3000"
        - name: RAILS_SERVE_STATIC_FILES
          value: "true"
        - name: RAILS_LOG_TO_STDOUT
          value: "true"
        - name: HTTP_AUTH_USERNAME
          valueFrom:
            secretKeyRef:
              key: CW_AUTH_USERNAME
              name: appsecrets
        - name: HTTP_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              key: CW_AUTH_PASSWORD
              name: appsecrets
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              key: SA_POSTGRES_URL_STAGING
              name: dbsecrets
        - name: S3_BUCKET_NAME
          value: wri-sites
        - name: AWS_REGION
          value: eu-west-1
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: CW_PLATFORMS_S3_ACCESS_KEY
              name: appsecrets
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: CW_PLATFORMS_S3_SECRET_ACCESS_KEY
              name: appsecrets
        - name: REDIS_SERVER
          value: redis://localhost:6379
        image: vizzuality/south-africa-platform
        imagePullPolicy: Always
        name: south-africa-platform-staging
        ports:
        - containerPort: 3000
          protocol: TCP
        resources:
          requests:
            cpu: "0"
            memory: "0"
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - args:
        - sidekiq
        env:
        - name: CW_FILES_PREFIX
          value: climatewatch.org/staging.climatewatch.org/south-africa/
        - name: AWS_REGION
          value: eu-west-1
        - name: RACK_ENV
          value: production
        - name: RAILS_ENV
          value: production
        - name: PORT
          value: "3000"
        - name: RAILS_SERVE_STATIC_FILES
          value: "true"
        - name: S3_BUCKET_NAME
          value: wri-sites
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: CW_PLATFORMS_S3_ACCESS_KEY
              name: appsecrets
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: CW_PLATFORMS_S3_SECRET_ACCESS_KEY
              name: appsecrets
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              key: SA_POSTGRES_URL_STAGING
              name: dbsecrets
        - name: REDIS_SERVER
          value: redis://localhost:6379
        image: vizzuality/south-africa-platform
        imagePullPolicy: Always
        name: south-africa-platform-sidekiq
        resources:
          limits:
            memory: 512Mi
          requests:
            memory: 128Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - image: redis
        imagePullPolicy: Always
        name: redis
        ports:
        - containerPort: 6379
          protocol: TCP
        resources:
          requests:
            cpu: "0"
            memory: "0"
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: regcred
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        key: type
        operator: Equal
        value: webapps
